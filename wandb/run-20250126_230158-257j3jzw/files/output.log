policy_gradient_wx.py:163: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at ../torch/csrc/utils/tensor_new.cpp:278.)
  state = torch.tensor(state_list, dtype=torch.float).to(device)
/home/lixiang/.local/lib/python3.8/site-packages/gym/logger.py:30: UserWarning: [33mWARN: You are calling 'step()' even though this environment has already returned done = True. You should always call 'reset()' once you receive 'done = True' -- any further steps are undefined behavior.[0m
  warnings.warn(colorize('%s: %s'%('WARN', msg % args), 'yellow'))
policy_gradient_wx.py:104: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  action = torch.tensor(transition_dict['actions']).view(-1, 1).to(self.device)
Traceback (most recent call last):
  File "policy_gradient_wx.py", line 249, in <module>
    # episode_reward = sum(transition_dict['rewards'])
TypeError: unsupported operand type(s) for +: 'int' and 'list'
Traceback (most recent call last):
  File "policy_gradient_wx.py", line 249, in <module>
    # episode_reward = sum(transition_dict['rewards'])
TypeError: unsupported operand type(s) for +: 'int' and 'list'
Exception ignored in: <module 'threading' from '/usr/lib/python3.8/threading.py'>
Traceback (most recent call last):
  File "/usr/lib/python3.8/threading.py", line 1388, in _shutdown
    lock.acquire()
KeyboardInterrupt:
